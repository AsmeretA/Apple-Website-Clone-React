{"ast":null,"code":"import _classCallCheck from\"/Users/user/Desktop/Apple-Website-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/user/Desktop/Apple-Website-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/user/Desktop/Apple-Website-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/user/Desktop/Apple-Website-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{Component}from\"react\";var Rating=/*#__PURE__*/function(_Component){_inherits(Rating,_Component);var _super=_createSuper(Rating);function Rating(){var _this;_classCallCheck(this,Rating);_this=_super.call(this);_this.increment=function(){// This works, but it is prone to error\n// During times where React doesn't imidiatelly accept the request of this function, it wouldn't work  \n// this.setState({\n//   value: this.state.value + 1\n// });\n// To check that this one fails, lets write something that should be dependent on the updated value \n// this.setState({\n//   value: this.state.value + 1\n// });\n// this.setState({\n//   value: this.state.value - 1\n// });\n// If we use an updater function to pass the current state instead, it will work\n// this.setState((prevState) => {\n//   return {\n//     value: prevState.value + 1,\n//   };\n// });\n// this.setState((state) => {\n//   return {\n//     value: state.value - 2,\n//   };\n// });\n// For the purpose of our example, lets just make the increment function arr the rating by one \n_this.setState(function(state){return{value:state.value+1};});};_this.decrement=function(){// The same thing for our decrement function \n// Lets make it so that it decreases the rating by 1 \n_this.setState(function(state){return{value:state.value-1};});};_this.state={value:5};return _this;}// Not that we are using an arrow function in here\n// If we just use the standard function, we will need to bind the finction inside our constructor. The arrow function does the binding for us automatically \n_createClass(Rating,[{key:\"render\",value:function render(){// Conditional rendering in React \nvar initialText=\"Average rating:\";var changedText=\"You rated this product:\";var displayText=\"\";var counter=1;if(this.state.value!=5){counter=counter+1;}if(counter>=2){displayText=changedText;}else{displayText=initialText;}return/*#__PURE__*/_jsxs(\"div\",{className:\"rating-wrapper\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Please rate this mac out of 10\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"postive\",onClick:this.increment,children:\" Rate up \"}),/*#__PURE__*/_jsx(\"button\",{className:\"negative\",onClick:this.decrement,children:\" Rate down \"}),/*#__PURE__*/_jsxs(\"div\",{className:\"rating-result\",children:[\" \",displayText,\" \",this.state.value]})]})]});}}]);return Rating;}(Component);export default Rating;","map":{"version":3,"sources":["/Users/user/Desktop/Apple-Website-React/src/Components/Main/Rating/Rating.js"],"names":["React","Component","Rating","increment","setState","state","value","decrement","initialText","changedText","displayText","counter"],"mappings":"gsBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,C,GAEMC,CAAAA,M,gGAEJ,iBAAa,wCACX,wBADW,MAUbC,SAVa,CAUD,UAAM,CAChB;AACA;AAEE;AACA;AACA;AAGF;AAEE;AACA;AACA;AAEA;AACA;AACA;AAEF;AAEE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEF;AACE,MAAKC,QAAL,CAAc,SAACC,KAAD,CAAW,CACvB,MAAO,CACLC,KAAK,CAAED,KAAK,CAACC,KAAN,CAAc,CADhB,CAAP,CAGD,CAJD,EAKH,CAjDY,OAkDbC,SAlDa,CAkDD,UAAM,CAEhB;AACA;AACA,MAAKH,QAAL,CAAc,SAACC,KAAD,CAAW,CACrB,MAAO,CACLC,KAAK,CAAED,KAAK,CAACC,KAAN,CAAc,CADhB,CAAP,CAGD,CAJH,EAKC,CA3DU,CAEV,MAAKD,KAAL,CAAa,CACZC,KAAK,CAAE,CADK,CAAb,CAFU,aAKZ,CAED;AACA;0DAqDS,CACP;AACA,GAAIE,CAAAA,WAAW,CAAG,iBAAlB,CACA,GAAIC,CAAAA,WAAW,CAAG,yBAAlB,CACA,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CAEA,GAAIC,CAAAA,OAAO,CAAG,CAAd,CAEA,GAAG,KAAKN,KAAL,CAAWC,KAAX,EAAoB,CAAvB,CAAyB,CACvBK,OAAO,CAAGA,OAAO,CAAG,CAApB,CACD,CAED,GAAGA,OAAO,EAAI,CAAd,CAAgB,CACdD,WAAW,CAAGD,WAAd,CACD,CAFD,IAEK,CACHC,WAAW,CAAGF,WAAd,CACD,CACD,mBACE,aAAK,SAAS,CAAC,gBAAf,wBACE,sDADF,cAEE,oCACE,eAAQ,SAAS,CAAC,SAAlB,CAA4B,OAAO,CAAE,KAAKL,SAA1C,uBADF,cAEE,eAAQ,SAAS,CAAC,UAAlB,CAA6B,OAAO,CAAE,KAAKI,SAA3C,yBAFF,cAGE,aAAK,SAAS,CAAC,eAAf,eAAiCG,WAAjC,KAA+C,KAAKL,KAAL,CAAWC,KAA1D,GAHF,GAFF,GADF,CAUD,C,oBA1FkBL,S,EA6FrB,cAAeC,CAAAA,MAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Rating extends Component {\n\n  constructor(){\n    super();\n     this.state = {\n      value: 5,\n    };   \n  }\n\n  // Not that we are using an arrow function in here\n  // If we just use the standard function, we will need to bind the finction inside our constructor. The arrow function does the binding for us automatically \n\n  increment = () => {\n    // This works, but it is prone to error\n    // During times where React doesn't imidiatelly accept the request of this function, it wouldn't work  \n    \n      // this.setState({\n      //   value: this.state.value + 1\n      // });\n\n\n    // To check that this one fails, lets write something that should be dependent on the updated value \n\n      // this.setState({\n      //   value: this.state.value + 1\n      // });\n\n      // this.setState({\n      //   value: this.state.value - 1\n      // });\n\n    // If we use an updater function to pass the current state instead, it will work\n\n      // this.setState((prevState) => {\n      //   return {\n      //     value: prevState.value + 1,\n      //   };\n      // });\n\n      // this.setState((state) => {\n      //   return {\n      //     value: state.value - 2,\n      //   };\n      // });\n\n    // For the purpose of our example, lets just make the increment function arr the rating by one \n      this.setState((state) => {\n        return {\n          value: state.value + 1,\n        };\n      });\n  };\n  decrement = () => {\n\n    // The same thing for our decrement function \n    // Lets make it so that it decreases the rating by 1 \n    this.setState((state) => {\n        return {\n          value: state.value - 1,\n        };\n      });\n    };\n\n  render() {\n    // Conditional rendering in React \n    let initialText = \"Average rating:\";\n    let changedText = \"You rated this product:\"\n    let displayText = \"\"; \n\n    let counter = 1; \n\n    if(this.state.value != 5){\n      counter = counter + 1; \n    }\n\n    if(counter >= 2){\n      displayText = changedText;\n    }else{\n      displayText = initialText; \n    }\n    return (\n      <div className=\"rating-wrapper\">\n        <h3>Please rate this mac out of 10</h3> \n        <div>\n          <button className=\"postive\" onClick={this.increment}> Rate up </button>\n          <button className=\"negative\" onClick={this.decrement}> Rate down </button>\n          <div className=\"rating-result\"> {displayText} {this.state.value}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Rating;"]},"metadata":{},"sourceType":"module"}